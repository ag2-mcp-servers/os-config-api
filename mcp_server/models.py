# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:34:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class ArchiveType(Enum):
    ARCHIVE_TYPE_UNSPECIFIED = 'ARCHIVE_TYPE_UNSPECIFIED'
    DEB = 'DEB'
    DEB_SRC = 'DEB_SRC'


class AptRepository(BaseModel):
    archiveType: Optional[ArchiveType] = Field(
        None,
        description='Type of archive files in this repository. The default behavior is DEB.',
    )
    components: Optional[List[str]] = Field(
        None,
        description='Required. List of components for this repository. Must contain at least one item.',
    )
    distribution: Optional[str] = Field(
        None, description='Required. Distribution of this repository.'
    )
    gpgKey: Optional[str] = Field(
        None,
        description='URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.',
    )
    uri: Optional[str] = Field(None, description='Required. URI for this repository.')


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    DIST = 'DIST'
    UPGRADE = 'UPGRADE'


class AptSettings(BaseModel):
    excludes: Optional[List[str]] = Field(
        None,
        description='List of packages to exclude from update. These packages will be excluded',
    )
    exclusivePackages: Optional[List[str]] = Field(
        None,
        description='An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.',
    )
    type: Optional[Type] = Field(
        None,
        description='By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.',
    )


class AssignmentGroupLabel(BaseModel):
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.',
    )


class AssignmentOsType(BaseModel):
    osArchitecture: Optional[str] = Field(
        None,
        description='Targets VM instances with OS Inventory enabled and having the following OS architecture.',
    )
    osShortName: Optional[str] = Field(
        None,
        description='Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".',
    )
    osVersion: Optional[str] = Field(
        None,
        description='Targets VM instances with OS Inventory enabled and having the following following OS version.',
    )


class CancelPatchJobRequest(BaseModel):
    pass


class Empty(BaseModel):
    pass


class Interpreter(Enum):
    INTERPRETER_UNSPECIFIED = 'INTERPRETER_UNSPECIFIED'
    NONE = 'NONE'
    SHELL = 'SHELL'
    POWERSHELL = 'POWERSHELL'


class FixedOrPercent(BaseModel):
    fixed: Optional[int] = Field(None, description='Specifies a fixed value.')
    percent: Optional[int] = Field(
        None,
        description='Specifies the relative value defined as a percentage, which will be multiplied by a reference value.',
    )


class GcsObject(BaseModel):
    bucket: Optional[str] = Field(
        None, description='Required. Bucket of the Google Cloud Storage object.'
    )
    generationNumber: Optional[str] = Field(
        None,
        description='Required. Generation number of the Google Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.',
    )
    object: Optional[str] = Field(
        None, description='Required. Name of the Google Cloud Storage object.'
    )


class GooRepository(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The name of the repository.'
    )
    url: Optional[str] = Field(None, description='Required. The url of the repository.')


class GooSettings(BaseModel):
    pass


class ApiMethod(Enum):
    API_METHOD_UNSPECIFIED = 'API_METHOD_UNSPECIFIED'
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'


class RolloutState(Enum):
    ROLLOUT_STATE_UNSPECIFIED = 'ROLLOUT_STATE_UNSPECIFIED'
    IN_PROGRESS = 'IN_PROGRESS'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    SUCCEEDED = 'SUCCEEDED'


class GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata(BaseModel):
    apiMethod: Optional[ApiMethod] = Field(
        None, description='The OS policy assignment API method.'
    )
    osPolicyAssignment: Optional[str] = Field(
        None,
        description='Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`',
    )
    rolloutStartTime: Optional[str] = Field(None, description='Rollout start time')
    rolloutState: Optional[RolloutState] = Field(
        None, description='State of the rollout'
    )
    rolloutUpdateTime: Optional[str] = Field(None, description='Rollout update time')


class LookupEffectiveGuestPolicyRequest(BaseModel):
    osArchitecture: Optional[str] = Field(
        None,
        description='Architecture of OS running on the instance. The OS Config agent only provides this field for targeting if OS Inventory is enabled for that instance.',
    )
    osShortName: Optional[str] = Field(
        None,
        description='Short name of the OS running on the instance. The OS Config agent only provides this field for targeting if OS Inventory is enabled for that instance.',
    )
    osVersion: Optional[str] = Field(
        None,
        description='Version of the OS running on the instance. The OS Config agent only provides this field for targeting if OS Inventory is enabled for that VM instance.',
    )


class OSPolicyAssignmentOperationMetadata(BaseModel):
    apiMethod: Optional[ApiMethod] = Field(
        None, description='The OS policy assignment API method.'
    )
    osPolicyAssignment: Optional[str] = Field(
        None,
        description='Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`',
    )
    rolloutStartTime: Optional[str] = Field(None, description='Rollout start time')
    rolloutState: Optional[RolloutState] = Field(
        None, description='State of the rollout'
    )
    rolloutUpdateTime: Optional[str] = Field(None, description='Rollout update time')


class OneTimeSchedule(BaseModel):
    executeTime: Optional[str] = Field(
        None, description='Required. The desired patch job execution time.'
    )


class DesiredState(Enum):
    DESIRED_STATE_UNSPECIFIED = 'DESIRED_STATE_UNSPECIFIED'
    INSTALLED = 'INSTALLED'
    UPDATED = 'UPDATED'
    REMOVED = 'REMOVED'


class Manager(Enum):
    MANAGER_UNSPECIFIED = 'MANAGER_UNSPECIFIED'
    ANY = 'ANY'
    APT = 'APT'
    YUM = 'YUM'
    ZYPPER = 'ZYPPER'
    GOO = 'GOO'


class Package(BaseModel):
    desiredState: Optional[DesiredState] = Field(
        None,
        description='The desired_state the agent should maintain for this package. The default is to ensure the package is installed.',
    )
    manager: Optional[Manager] = Field(
        None,
        description='Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.',
    )


class RebootConfig(Enum):
    REBOOT_CONFIG_UNSPECIFIED = 'REBOOT_CONFIG_UNSPECIFIED'
    DEFAULT = 'DEFAULT'
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    PAUSED = 'PAUSED'


class PatchInstanceFilterGroupLabel(BaseModel):
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.',
    )


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    STARTED = 'STARTED'
    INSTANCE_LOOKUP = 'INSTANCE_LOOKUP'
    PATCHING = 'PATCHING'
    SUCCEEDED = 'SUCCEEDED'
    COMPLETED_WITH_ERRORS = 'COMPLETED_WITH_ERRORS'
    CANCELED = 'CANCELED'
    TIMED_OUT = 'TIMED_OUT'


class State2(Enum):
    PATCH_STATE_UNSPECIFIED = 'PATCH_STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    INACTIVE = 'INACTIVE'
    NOTIFIED = 'NOTIFIED'
    STARTED = 'STARTED'
    DOWNLOADING_PATCHES = 'DOWNLOADING_PATCHES'
    APPLYING_PATCHES = 'APPLYING_PATCHES'
    REBOOTING = 'REBOOTING'
    SUCCEEDED = 'SUCCEEDED'
    SUCCEEDED_REBOOT_REQUIRED = 'SUCCEEDED_REBOOT_REQUIRED'
    FAILED = 'FAILED'
    ACKED = 'ACKED'
    TIMED_OUT = 'TIMED_OUT'
    RUNNING_PRE_PATCH_STEP = 'RUNNING_PRE_PATCH_STEP'
    RUNNING_POST_PATCH_STEP = 'RUNNING_POST_PATCH_STEP'
    NO_AGENT_DETECTED = 'NO_AGENT_DETECTED'


class PatchJobInstanceDetails(BaseModel):
    attemptCount: Optional[str] = Field(
        None,
        description='The number of times the agent that the agent attempts to apply the patch.',
    )
    failureReason: Optional[str] = Field(
        None, description='If the patch fails, this field provides the reason.'
    )
    instanceSystemId: Optional[str] = Field(
        None,
        description='The unique identifier for the instance. This identifier is defined by the server.',
    )
    name: Optional[str] = Field(
        None,
        description='The instance name in the form `projects/*/zones/*/instances/*`',
    )
    state: Optional[State2] = Field(
        None, description='Current state of instance patch.'
    )


class PatchJobInstanceDetailsSummary(BaseModel):
    ackedInstanceCount: Optional[str] = Field(
        None, description='Number of instances that have acked and will start shortly.'
    )
    applyingPatchesInstanceCount: Optional[str] = Field(
        None, description='Number of instances that are applying patches.'
    )
    downloadingPatchesInstanceCount: Optional[str] = Field(
        None, description='Number of instances that are downloading patches.'
    )
    failedInstanceCount: Optional[str] = Field(
        None, description='Number of instances that failed.'
    )
    inactiveInstanceCount: Optional[str] = Field(
        None, description='Number of instances that are inactive.'
    )
    noAgentDetectedInstanceCount: Optional[str] = Field(
        None,
        description='Number of instances that do not appear to be running the agent. Check to ensure that the agent is installed, running, and able to communicate with the service.',
    )
    notifiedInstanceCount: Optional[str] = Field(
        None, description='Number of instances notified about patch job.'
    )
    pendingInstanceCount: Optional[str] = Field(
        None, description='Number of instances pending patch job.'
    )
    postPatchStepInstanceCount: Optional[str] = Field(
        None, description='Number of instances that are running the post-patch step.'
    )
    prePatchStepInstanceCount: Optional[str] = Field(
        None, description='Number of instances that are running the pre-patch step.'
    )
    rebootingInstanceCount: Optional[str] = Field(
        None, description='Number of instances rebooting.'
    )
    startedInstanceCount: Optional[str] = Field(
        None, description='Number of instances that have started.'
    )
    succeededInstanceCount: Optional[str] = Field(
        None, description='Number of instances that have completed successfully.'
    )
    succeededRebootRequiredInstanceCount: Optional[str] = Field(
        None, description='Number of instances that require reboot.'
    )
    timedOutInstanceCount: Optional[str] = Field(
        None,
        description='Number of instances that exceeded the time out while applying the patch.',
    )


class Mode(Enum):
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    ZONE_BY_ZONE = 'ZONE_BY_ZONE'
    CONCURRENT_ZONES = 'CONCURRENT_ZONES'


class PatchRollout(BaseModel):
    disruptionBudget: Optional[FixedOrPercent] = Field(
        None,
        description='The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.',
    )
    mode: Optional[Mode] = Field(None, description='Mode of the patch rollout.')


class PausePatchDeploymentRequest(BaseModel):
    pass


class Frequency(Enum):
    FREQUENCY_UNSPECIFIED = 'FREQUENCY_UNSPECIFIED'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    DAILY = 'DAILY'


class ResumePatchDeploymentRequest(BaseModel):
    pass


class SoftwareRecipeArtifactGcs(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description='Bucket of the Google Cloud Storage object. Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `my-bucket`.',
    )
    generation: Optional[str] = Field(
        None,
        description='Must be provided if allow_insecure is false. Generation number of the Google Cloud Storage object. `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `1234567`.',
    )
    object: Optional[str] = Field(
        None,
        description='Name of the Google Cloud Storage object. As specified [here] (https://cloud.google.com/storage/docs/naming#objectnames) Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `foo/bar`.',
    )


class SoftwareRecipeArtifactRemote(BaseModel):
    checksum: Optional[str] = Field(
        None,
        description="Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any of the steps.",
    )
    uri: Optional[str] = Field(
        None,
        description='URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.',
    )


class SoftwareRecipeStepCopyFile(BaseModel):
    artifactId: Optional[str] = Field(
        None, description='Required. The id of the relevant artifact in the recipe.'
    )
    destination: Optional[str] = Field(
        None, description='Required. The absolute path on the instance to put the file.'
    )
    overwrite: Optional[bool] = Field(
        None,
        description='Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.',
    )
    permissions: Optional[str] = Field(
        None,
        description='Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4',
    )


class SoftwareRecipeStepExecFile(BaseModel):
    allowedExitCodes: Optional[List[int]] = Field(
        None,
        description='Defaults to [0]. A list of possible return values that the program can return to indicate a success.',
    )
    args: Optional[List[str]] = Field(
        None, description='Arguments to be passed to the provided executable.'
    )
    artifactId: Optional[str] = Field(
        None, description='The id of the relevant artifact in the recipe.'
    )
    localPath: Optional[str] = Field(
        None, description='The absolute path of the file on the local filesystem.'
    )


class Type1(Enum):
    ARCHIVE_TYPE_UNSPECIFIED = 'ARCHIVE_TYPE_UNSPECIFIED'
    TAR = 'TAR'
    TAR_GZIP = 'TAR_GZIP'
    TAR_BZIP = 'TAR_BZIP'
    TAR_LZMA = 'TAR_LZMA'
    TAR_XZ = 'TAR_XZ'
    ZIP = 'ZIP'


class SoftwareRecipeStepExtractArchive(BaseModel):
    artifactId: Optional[str] = Field(
        None, description='Required. The id of the relevant artifact in the recipe.'
    )
    destination: Optional[str] = Field(
        None,
        description='Directory to extract archive to. Defaults to `/` on Linux or `C:\\` on Windows.',
    )
    type: Optional[Type1] = Field(
        None, description='Required. The type of the archive to extract.'
    )


class SoftwareRecipeStepInstallDpkg(BaseModel):
    artifactId: Optional[str] = Field(
        None, description='Required. The id of the relevant artifact in the recipe.'
    )


class SoftwareRecipeStepInstallMsi(BaseModel):
    allowedExitCodes: Optional[List[int]] = Field(
        None,
        description='Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]',
    )
    artifactId: Optional[str] = Field(
        None, description='Required. The id of the relevant artifact in the recipe.'
    )
    flags: Optional[List[str]] = Field(
        None,
        description='The flags to use when installing the MSI defaults to ["/i"] (i.e. the install flag).',
    )


class SoftwareRecipeStepInstallRpm(BaseModel):
    artifactId: Optional[str] = Field(
        None, description='Required. The id of the relevant artifact in the recipe.'
    )


class Interpreter1(Enum):
    INTERPRETER_UNSPECIFIED = 'INTERPRETER_UNSPECIFIED'
    SHELL = 'SHELL'
    POWERSHELL = 'POWERSHELL'


class SoftwareRecipeStepRunScript(BaseModel):
    allowedExitCodes: Optional[List[int]] = Field(
        None,
        description='Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]',
    )
    interpreter: Optional[Interpreter1] = Field(
        None,
        description='The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)).',
    )
    script: Optional[str] = Field(
        None, description='Required. The shell script to be executed.'
    )


class TimeOfDay(BaseModel):
    hours: Optional[int] = Field(
        None,
        description='Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.',
    )
    minutes: Optional[int] = Field(
        None, description='Minutes of hour of day. Must be from 0 to 59.'
    )
    nanos: Optional[int] = Field(
        None,
        description='Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.',
    )
    seconds: Optional[int] = Field(
        None,
        description='Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.',
    )


class TimeZone(BaseModel):
    id: Optional[str] = Field(
        None, description='IANA Time Zone Database time zone, e.g. "America/New_York".'
    )
    version: Optional[str] = Field(
        None,
        description='Optional. IANA Time Zone Database version number, e.g. "2019a".',
    )


class DayOfWeek(Enum):
    DAY_OF_WEEK_UNSPECIFIED = 'DAY_OF_WEEK_UNSPECIFIED'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class WeekDayOfMonth(BaseModel):
    dayOfWeek: Optional[DayOfWeek] = Field(
        None, description='Required. A day of the week.'
    )
    dayOffset: Optional[int] = Field(
        None,
        description='Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].',
    )
    weekOrdinal: Optional[int] = Field(
        None,
        description='Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.',
    )


class WeeklySchedule(BaseModel):
    dayOfWeek: Optional[DayOfWeek] = Field(
        None, description='Required. Day of the week.'
    )


class Classification(Enum):
    CLASSIFICATION_UNSPECIFIED = 'CLASSIFICATION_UNSPECIFIED'
    CRITICAL = 'CRITICAL'
    SECURITY = 'SECURITY'
    DEFINITION = 'DEFINITION'
    DRIVER = 'DRIVER'
    FEATURE_PACK = 'FEATURE_PACK'
    SERVICE_PACK = 'SERVICE_PACK'
    TOOL = 'TOOL'
    UPDATE_ROLLUP = 'UPDATE_ROLLUP'
    UPDATE = 'UPDATE'


class WindowsUpdateSettings(BaseModel):
    classifications: Optional[List[Classification]] = Field(
        None,
        description='Only apply updates of these windows update classifications. If empty, all updates are applied.',
    )
    excludes: Optional[List[str]] = Field(
        None, description='List of KBs to exclude from update.'
    )
    exclusivePatches: Optional[List[str]] = Field(
        None,
        description='An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.',
    )


class YumRepository(BaseModel):
    baseUrl: Optional[str] = Field(
        None, description='Required. The location of the repository directory.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the repository.'
    )
    gpgKeys: Optional[List[str]] = Field(None, description='URIs of GPG keys.')
    id: Optional[str] = Field(
        None,
        description='Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.',
    )


class YumSettings(BaseModel):
    excludes: Optional[List[str]] = Field(
        None,
        description='List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.',
    )
    exclusivePackages: Optional[List[str]] = Field(
        None,
        description='An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.',
    )
    minimal: Optional[bool] = Field(
        None, description='Will cause patch to run `yum update-minimal` instead.'
    )
    security: Optional[bool] = Field(
        None,
        description='Adds the `--security` flag to `yum update`. Not supported on all platforms.',
    )


class ZypperRepository(BaseModel):
    baseUrl: Optional[str] = Field(
        None, description='Required. The location of the repository directory.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the repository.'
    )
    gpgKeys: Optional[List[str]] = Field(None, description='URIs of GPG keys.')
    id: Optional[str] = Field(
        None,
        description='Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.',
    )


class ZypperSettings(BaseModel):
    categories: Optional[List[str]] = Field(
        None,
        description='Install only patches with these categories. Common categories include security, recommended, and feature.',
    )
    excludes: Optional[List[str]] = Field(
        None, description='List of patches to exclude from update.'
    )
    exclusivePatches: Optional[List[str]] = Field(
        None,
        description="An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.",
    )
    severities: Optional[List[str]] = Field(
        None,
        description='Install only patches with these severities. Common severities include critical, important, moderate, and low.',
    )
    withOptional: Optional[bool] = Field(
        None, description='Adds the `--with-optional` flag to `zypper patch`.'
    )
    withUpdate: Optional[bool] = Field(
        None, description='Adds the `--with-update` flag, to `zypper patch`.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Assignment(BaseModel):
    groupLabels: Optional[List[AssignmentGroupLabel]] = Field(
        None,
        description='Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".',
    )
    instanceNamePrefixes: Optional[List[str]] = Field(
        None,
        description='Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.',
    )
    instances: Optional[List[str]] = Field(
        None,
        description='Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.',
    )
    osTypes: Optional[List[AssignmentOsType]] = Field(
        None,
        description='Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.',
    )
    zones: Optional[List[str]] = Field(
        None,
        description='Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.',
    )


class EffectiveGuestPolicySourcedPackage(BaseModel):
    package: Optional[Package] = Field(
        None, description='A software package to configure on the VM instance.'
    )
    source: Optional[str] = Field(
        None, description='Name of the guest policy providing this config.'
    )


class ExecStepConfig(BaseModel):
    allowedSuccessCodes: Optional[List[int]] = Field(
        None,
        description='Defaults to [0]. A list of possible return values that the execution can return to indicate a success.',
    )
    gcsObject: Optional[GcsObject] = Field(
        None, description='A Google Cloud Storage object containing the executable.'
    )
    interpreter: Optional[Interpreter] = Field(
        None,
        description='The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)).',
    )
    localPath: Optional[str] = Field(
        None, description='An absolute path to the executable on the VM.'
    )


class ListPatchJobInstanceDetailsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token that can be used to get the next page of results.',
    )
    patchJobInstanceDetails: Optional[List[PatchJobInstanceDetails]] = Field(
        None, description='A list of instance status.'
    )


class MonthlySchedule(BaseModel):
    monthDay: Optional[int] = Field(
        None,
        description='Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.',
    )
    weekDayOfMonth: Optional[WeekDayOfMonth] = Field(
        None, description='Required. Week day in a month.'
    )


class PackageRepository(BaseModel):
    apt: Optional[AptRepository] = Field(None, description='An Apt Repository.')
    goo: Optional[GooRepository] = Field(None, description='A Goo Repository.')
    yum: Optional[YumRepository] = Field(None, description='A Yum Repository.')
    zypper: Optional[ZypperRepository] = Field(None, description='A Zypper Repository.')


class PatchInstanceFilter(BaseModel):
    all: Optional[bool] = Field(
        None,
        description='Target all VM instances in the project. If true, no other criteria is permitted.',
    )
    groupLabels: Optional[List[PatchInstanceFilterGroupLabel]] = Field(
        None,
        description='Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".',
    )
    instanceNamePrefixes: Optional[List[str]] = Field(
        None,
        description='Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".',
    )
    instances: Optional[List[str]] = Field(
        None,
        description='Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`',
    )
    zones: Optional[List[str]] = Field(
        None,
        description='Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.',
    )


class RecurringSchedule(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='Optional. The end time at which a recurring patch deployment schedule is no longer active.',
    )
    frequency: Optional[Frequency] = Field(
        None, description='Required. The frequency unit of this recurring schedule.'
    )
    lastExecuteTime: Optional[str] = Field(
        None, description='Output only. The time the last patch job ran successfully.'
    )
    monthly: Optional[MonthlySchedule] = Field(
        None, description='Required. Schedule with monthly executions.'
    )
    nextExecuteTime: Optional[str] = Field(
        None,
        description='Output only. The time the next patch job is scheduled to run.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.',
    )
    timeOfDay: Optional[TimeOfDay] = Field(
        None, description='Required. Time of the day to run a recurring deployment.'
    )
    timeZone: Optional[TimeZone] = Field(
        None,
        description='Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.',
    )
    weekly: Optional[WeeklySchedule] = Field(
        None, description='Required. Schedule with weekly executions.'
    )


class SoftwareRecipeArtifact(BaseModel):
    allowInsecure: Optional[bool] = Field(
        None,
        description='Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.',
    )
    gcs: Optional[SoftwareRecipeArtifactGcs] = Field(
        None, description='A Google Cloud Storage artifact.'
    )
    id: Optional[str] = Field(
        None,
        description='Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.',
    )
    remote: Optional[SoftwareRecipeArtifactRemote] = Field(
        None, description='A generic remote artifact.'
    )


class SoftwareRecipeStep(BaseModel):
    archiveExtraction: Optional[SoftwareRecipeStepExtractArchive] = Field(
        None, description='Extracts an archive into the specified directory.'
    )
    dpkgInstallation: Optional[SoftwareRecipeStepInstallDpkg] = Field(
        None, description='Installs a deb file via dpkg.'
    )
    fileCopy: Optional[SoftwareRecipeStepCopyFile] = Field(
        None, description='Copies a file onto the instance.'
    )
    fileExec: Optional[SoftwareRecipeStepExecFile] = Field(
        None, description='Executes an artifact or local file.'
    )
    msiInstallation: Optional[SoftwareRecipeStepInstallMsi] = Field(
        None, description='Installs an MSI file.'
    )
    rpmInstallation: Optional[SoftwareRecipeStepInstallRpm] = Field(
        None, description='Installs an rpm file via the rpm utility.'
    )
    scriptRun: Optional[SoftwareRecipeStepRunScript] = Field(
        None, description='Runs commands in a shell.'
    )


class EffectiveGuestPolicySourcedPackageRepository(BaseModel):
    packageRepository: Optional[PackageRepository] = Field(
        None,
        description='A software package repository to configure on the VM instance.',
    )
    source: Optional[str] = Field(
        None, description='Name of the guest policy providing this config.'
    )


class ExecStep(BaseModel):
    linuxExecStepConfig: Optional[ExecStepConfig] = Field(
        None,
        description='The ExecStepConfig for all Linux VMs targeted by the PatchJob.',
    )
    windowsExecStepConfig: Optional[ExecStepConfig] = Field(
        None,
        description='The ExecStepConfig for all Windows VMs targeted by the PatchJob.',
    )


class PatchConfig(BaseModel):
    apt: Optional[AptSettings] = Field(
        None,
        description='Apt update settings. Use this setting to override the default `apt` patch rules.',
    )
    goo: Optional[GooSettings] = Field(
        None,
        description='Goo update settings. Use this setting to override the default `goo` patch rules.',
    )
    migInstancesAllowed: Optional[bool] = Field(
        None,
        description='Allows the patch job to run on Managed instance groups (MIGs).',
    )
    postStep: Optional[ExecStep] = Field(
        None, description='The `ExecStep` to run after the patch update.'
    )
    preStep: Optional[ExecStep] = Field(
        None, description='The `ExecStep` to run before the patch update.'
    )
    rebootConfig: Optional[RebootConfig] = Field(
        None, description='Post-patch reboot settings.'
    )
    windowsUpdate: Optional[WindowsUpdateSettings] = Field(
        None,
        description='Windows update settings. Use this override the default windows patch rules.',
    )
    yum: Optional[YumSettings] = Field(
        None,
        description='Yum update settings. Use this setting to override the default `yum` patch rules.',
    )
    zypper: Optional[ZypperSettings] = Field(
        None,
        description='Zypper update settings. Use this setting to override the default `zypper` patch rules.',
    )


class PatchDeployment(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.',
    )
    duration: Optional[str] = Field(
        None,
        description='Optional. Duration of the patch. After the duration ends, the patch times out.',
    )
    instanceFilter: Optional[PatchInstanceFilter] = Field(
        None, description='Required. VM instances to patch.'
    )
    lastExecuteTime: Optional[str] = Field(
        None,
        description='Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.',
    )
    name: Optional[str] = Field(
        None,
        description='Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.',
    )
    oneTimeSchedule: Optional[OneTimeSchedule] = Field(
        None, description='Required. Schedule a one-time execution.'
    )
    patchConfig: Optional[PatchConfig] = Field(
        None, description='Optional. Patch configuration that is applied.'
    )
    recurringSchedule: Optional[RecurringSchedule] = Field(
        None, description='Required. Schedule recurring executions.'
    )
    rollout: Optional[PatchRollout] = Field(
        None, description='Optional. Rollout strategy of the patch job.'
    )
    state: Optional[State] = Field(
        None, description='Output only. Current state of the patch deployment.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.',
    )


class PatchJob(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Time this patch job was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Description of the patch job. Length of the description is limited to 1024 characters.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Display name for this patch job. This is not a unique identifier.',
    )
    dryRun: Optional[bool] = Field(
        None,
        description='If this patch job is a dry run, the agent reports that it has finished without running any updates on the VM instance.',
    )
    duration: Optional[str] = Field(
        None,
        description='Duration of the patch job. After the duration ends, the patch job times out.',
    )
    errorMessage: Optional[str] = Field(
        None,
        description='If this patch job failed, this message provides information about the failure.',
    )
    instanceDetailsSummary: Optional[PatchJobInstanceDetailsSummary] = Field(
        None, description='Summary of instance details.'
    )
    instanceFilter: Optional[PatchInstanceFilter] = Field(
        None, description='Instances to patch.'
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier for this patch job in the form `projects/*/patchJobs/*`',
    )
    patchConfig: Optional[PatchConfig] = Field(
        None, description='Patch configuration being applied.'
    )
    patchDeployment: Optional[str] = Field(
        None,
        description='Output only. Name of the patch deployment that created this patch job.',
    )
    percentComplete: Optional[float] = Field(
        None,
        description='Reflects the overall progress of the patch job in the range of 0.0 being no progress to 100.0 being complete.',
    )
    rollout: Optional[PatchRollout] = Field(
        None, description='Rollout strategy being applied.'
    )
    state: Optional[State1] = Field(
        None, description='The current state of the PatchJob.'
    )
    updateTime: Optional[str] = Field(
        None, description='Last time this patch job was updated.'
    )


class SoftwareRecipe(BaseModel):
    artifacts: Optional[List[SoftwareRecipeArtifact]] = Field(
        None, description='Resources available to be used in the steps in the recipe.'
    )
    desiredState: Optional[DesiredState] = Field(
        None,
        description="Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.",
    )
    installSteps: Optional[List[SoftwareRecipeStep]] = Field(
        None,
        description='Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.',
    )
    updateSteps: Optional[List[SoftwareRecipeStep]] = Field(
        None,
        description='Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.',
    )
    version: Optional[str] = Field(
        None,
        description='The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).',
    )


class EffectiveGuestPolicySourcedSoftwareRecipe(BaseModel):
    softwareRecipe: Optional[SoftwareRecipe] = Field(
        None, description='A software recipe to configure on the VM instance.'
    )
    source: Optional[str] = Field(
        None, description='Name of the guest policy providing this config.'
    )


class ExecutePatchJobRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Description of the patch job. Length of the description is limited to 1024 characters.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Display name for this patch job. This does not have to be unique.',
    )
    dryRun: Optional[bool] = Field(
        None,
        description='If this patch is a dry-run only, instances are contacted but will do nothing.',
    )
    duration: Optional[str] = Field(
        None,
        description='Duration of the patch job. After the duration ends, the patch job times out.',
    )
    instanceFilter: Optional[PatchInstanceFilter] = Field(
        None,
        description='Required. Instances to patch, either explicitly or filtered by some criteria such as zone or labels.',
    )
    patchConfig: Optional[PatchConfig] = Field(
        None,
        description='Patch configuration being applied. If omitted, instances are patched using the default configurations.',
    )
    rollout: Optional[PatchRollout] = Field(
        None, description='Rollout strategy of the patch job.'
    )


class GuestPolicy(BaseModel):
    assignment: Optional[Assignment] = Field(
        None,
        description='Required. Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time this guest policy was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Description of the guest policy. Length of the description is limited to 1024 characters.',
    )
    etag: Optional[str] = Field(
        None,
        description="The etag for this guest policy. If this is provided on update, it must match the server's etag.",
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.',
    )
    packageRepositories: Optional[List[PackageRepository]] = Field(
        None,
        description='A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.',
    )
    packages: Optional[List[Package]] = Field(
        None, description='The software packages to be managed by this policy.'
    )
    recipes: Optional[List[SoftwareRecipe]] = Field(
        None, description='A list of Recipes to install on the VM instance.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Last time this guest policy was updated.'
    )


class ListGuestPoliciesResponse(BaseModel):
    guestPolicies: Optional[List[GuestPolicy]] = Field(
        None, description='The list of GuestPolicies.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token that can be used to get the next page of guest policies.',
    )


class ListPatchDeploymentsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token that can be used to get the next page of patch deployments.',
    )
    patchDeployments: Optional[List[PatchDeployment]] = Field(
        None, description='The list of patch deployments.'
    )


class ListPatchJobsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A pagination token that can be used to get the next page of results.',
    )
    patchJobs: Optional[List[PatchJob]] = Field(
        None, description='The list of patch jobs.'
    )


class EffectiveGuestPolicy(BaseModel):
    packageRepositories: Optional[
        List[EffectiveGuestPolicySourcedPackageRepository]
    ] = Field(
        None,
        description='List of package repository configurations assigned to the VM instance.',
    )
    packages: Optional[List[EffectiveGuestPolicySourcedPackage]] = Field(
        None, description='List of package configurations assigned to the VM instance.'
    )
    softwareRecipes: Optional[List[EffectiveGuestPolicySourcedSoftwareRecipe]] = Field(
        None, description='List of recipes assigned to the VM instance.'
    )
